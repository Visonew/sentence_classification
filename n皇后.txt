
def output(queenNumber, queenLocation):  # 打印棋盘及皇后 #
    for i in range(queenNumber):
        for j in range(queenNumber):
            if j == queenLocation[i]:
                print('|1', end='')
            else:
                print('| ', end='')
        print('|')
    print()


def isLegal(queenNumber, queenLocation):  # 测试该棋盘是否合法 #
    for i in range(queenNumber):
        for j in range(i+1, queenNumber):
            if queenLocation[i] == queenLocation[j]:
                return False
            if abs(queenLocation[i] - queenLocation[j]) == abs(i - j):
                return False
    return True


def search1(queenLocation, queenNumber, depth):  # 不含剪枝函数的回溯法 #
    global count
    if depth >= queenNumber:
        if isLegal(queenNumber, queenLocation):
            count += 1
            output(queenNumber, queenLocation)
        return

    else:
        for i in range(queenNumber):
            queenLocation[depth] = i
            search1(queenLocation, queenNumber, depth+1)
            queenLocation[depth] = 0


def search2(queenLocation, queenNumber, depth):  # 含剪枝函数的回溯法 #
    global count
    if depth >= queenNumber:
        if isLegal(queenNumber, queenLocation):
            count += 1
            output(queenNumber, queenLocation)
        return

    else:
        for i in range(queenNumber):
            if i not in queenLocation:
                queenLocation[depth] = i
            else:
                continue
            search2(queenLocation, queenNumber, depth+1)
            queenLocation[depth] = -1



# search1测试 #
location1 = [0, 0, 0, 0, 0, 0, 0, 0]
search1(location1, len(location1), 0)


# search2测试 #
# location2 = [-1, -1, -1, -1, -1, -1, -1, -1]
# search2(location2, len(location2), 0)